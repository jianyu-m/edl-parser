sym = @ { ASCII_ALPHA | "_" }
identifier = @ { sym ~ (sym | ASCII_DIGIT)* }
number = { ASCII_DIGIT+ }

WHITESPACE        = _ { " " | "\t" | "\r" | "\n" }
NEWLINE           = _ { "\n" | "\r\n" | "\r" }
MULTILINE_COMMENT = @ { "/*" ~ (!"*/" ~ ANY)* ~ "*/" }
ONELINE_COMMENT   = @ { "//" ~ (!NEWLINE ~ ANY)* ~ NEWLINE }
COMMENT           = _ { ONELINE_COMMENT |  MULTILINE_COMMENT}

// data types
Tchar     = { "char" }
Tshort    = { "short" }
Tunsigned = { "unsigned" }
Tint      = { "int" }
Tfloat    = { "float" }
Tdouble   = { "double" }

Tint8     = { "int8_t" }
Tint16    = { "int16_t" }
Tint32    = { "int32_t" }
Tint64    = { "int64_t" }

Tuint8    = { "uint8_t" }
Tuint16   = { "uint16_t" }
Tuint32   = { "uint32_t" }
Tuint64   = { "uint64_t" }

Tsizet    = { "size_t" }
Twchar    = { "wchar_t" }
Tlong     = { "long" }
Tvoid     = { "void" }

Tstruct   = { "struct" ~ identifier }
Tunion    = { "union" ~ identifier }
Tenum     = { "enum" ~ identifier }
Tclass     = { identifier }

//   (* specifier *)
Tenclave   = _ { "enclave" }
Ttrusted   = _ { "trusted" }
Tuntrusted = _ { "untrusted" }
Tfrom      = _ { "from" }
Timport    = _ { "import" }
Tallow     = _ { "allow" }
Tpublic    = _ { "public" }
Tinclude   = _ { "include" }

//   (* Type qualifier *)
Tconst = { "const" }

//   (* symbols *)
TLBrace    = _ { "{" }
TRBrace    = _ { "}" }
TLParen    = _ { "(" }
TRParen    = _ { ")" }
TLBrack    = _ { "[" }
TRBrack    = _ { "]" }
TPtr       = { "*" }
TDot       = { "." }
TComma     = _ { "," }
TSemicolon = _ { ";" }
TEqual     = { " = " }

edl       = { COMMENT* ~ Tenclave ~ TLBrace ~ trusted* ~ untrusted* ~ TRBrace }
trusted   = { Ttrusted ~ TLBrace ~ trusted_function* ~ TRBrace ~ TSemicolon }
untrusted = { Tuntrusted ~ TLBrace ~ untrusted_function* ~ TRBrace ~ TSemicolon }

basic_type = @ { Tchar | Tshort | Tunsigned | Tint | Tfloat | Tdouble | Tvoid | Tstruct | Tunion | Tenum | Tclass }
ptr_prefix = @ { "*" }

parameterOptEntryValue = @ { "=" ~ identifier}
parameterOptEntryKey = @ { identifier }
parameterOptEntry = @ { parameterOptEntryKey ~ parameterOptEntryValue? }
parameterOptEntryEnd = @ { "," ~ parameterOptEntry }
parameterOptEntries = { parameterOptEntry ~ parameterOptEntryEnd* }
parameterOpt = { TLBrack ~ parameterOptEntries ~ TRBrack }
parameter = { parameterOpt? ~ basic_type ~ ptr_prefix? ~ identifier }
parametersEnd = { "," ~ parameter }
parameters = { parameter ~ parametersEnd* }
funcName = { identifier }

trusted_function = { Tpublic ~ basic_type ~ funcName ~ TLParen ~ parameters ~ TRParen ~ TSemicolon }
untrusted_function = { Tpublic ~ basic_type ~ funcName ~ TLParen ~ parameters ~ TRParen ~ TSemicolon }